/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import chat.Chat_client;
import chat.data_socket;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JScrollBar;

/**
 *
 * @author duong
 */
public class fr_chat extends javax.swing.JFrame {

    public int fr_ID;
    public boolean  vibrate = true;
    public String fr_name = "";
    public ImageIcon icon_fr = null;
    Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
    public fr_call call = null;
    public fr_call_notify fcn = null;
    public Clip clip;
    public String[] data_from_server;
    public String messenge = "";
    
    public fr_chat() {
        initComponents();
        scrollpane_html.getVerticalScrollBar().setUnitIncrement(20);
        html.setContentType("text/html");
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        this.txt_input_msg.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e){
                if(e.getKeyCode() == KeyEvent.VK_ENTER){
                    if(!txt_input_msg.getText().equalsIgnoreCase("\n") && !txt_input_msg.getText().equalsIgnoreCase(""))
                        send(txt_input_msg.getText());
                    txt_input_msg.setText("");
                }
            }
        });
        
        this.btn_call.setIcon(new ImageIcon(new ImageIcon(getClass().getClassLoader().getResource("image/call_icon.png")).getImage().getScaledInstance(50, 50, Image.SCALE_DEFAULT)));
        this.lb_avaratar_fr.setIcon(icon_fr);
        if(!Chat_client.calling)
            this.btn_call.setEnabled(true);
        else
            this.btn_call.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_buzz = new javax.swing.JButton();
        lb_avaratar_fr = new javax.swing.JLabel();
        lb_avartar_me = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_input_msg = new javax.swing.JTextArea();
        btn_call = new javax.swing.JButton();
        scrollpane_html = new javax.swing.JScrollPane();
        html = new javax.swing.JTextPane();

        setResizable(false);

        btn_buzz.setText("buzz");
        btn_buzz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buzzActionPerformed(evt);
            }
        });

        lb_avaratar_fr.setBorder(BorderFactory.createLineBorder(new Color(0,255,0),2));
        lb_avaratar_fr.setMaximumSize(new java.awt.Dimension(100, 100));
        lb_avaratar_fr.setMinimumSize(new java.awt.Dimension(100, 100));
        lb_avaratar_fr.setPreferredSize(new java.awt.Dimension(100, 100));

        lb_avartar_me.setBorder(BorderFactory.createLineBorder(new Color(0,255,0),2));
        lb_avartar_me.setMaximumSize(new java.awt.Dimension(100, 100));
        lb_avartar_me.setMinimumSize(new java.awt.Dimension(100, 100));
        lb_avartar_me.setPreferredSize(new java.awt.Dimension(100, 100));

        txt_input_msg.setColumns(20);
        txt_input_msg.setLineWrap(true);
        txt_input_msg.setRows(5);
        txt_input_msg.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txt_input_msg);

        btn_call.setEnabled(false);
        btn_call.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_callActionPerformed(evt);
            }
        });

        html.setEditable(false);
        html.setAutoscrolls(false);
        scrollpane_html.setViewportView(html);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_buzz)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(scrollpane_html, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lb_avaratar_fr, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lb_avartar_me, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btn_call, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, scrollpane_html});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollpane_html, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_buzz))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lb_avaratar_fr, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_call, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_avartar_me, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lb_avaratar_fr, lb_avartar_me});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_buzzActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buzzActionPerformed
        this.send("buzz");
    }//GEN-LAST:event_btn_buzzActionPerformed

    private void btn_callActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_callActionPerformed
        this.btn_call.setEnabled(false);
        this.send("Cuộc gọi thoại");
        this.initcall("request_call"); // khởi tạo với chế độ yêu cầu
    }//GEN-LAST:event_btn_callActionPerformed
    public void showcallnotify(){
        System.out.println("call in showcallnotify");
        fcn = new fr_call_notify();
        fcn.setTitle(fr_name+" Đang gọi");
        fcn.fr_chat = this;
        fcn.lb_avartar.setIcon(icon_fr);
        fcn.setLocation(dim.width/2-fcn.getWidth()/2, dim.height/2-fcn.getHeight()/2);
        fcn.setVisible(true);
        this.clip = this.playsound("ringer.wav");
        this.clip.start();
        this.btn_call.setEnabled(false);
    }
   
    public void denied_call(){
        data_socket dtsk = new data_socket();
                dtsk.action = "respon_call";
                String[] data = new String[3];
                data[0] = String.valueOf(Chat_client.my_ID);
                data[1] = String.valueOf(fr_ID);
                data[2] = "Từ chối";
                dtsk.data = data;
                dtsk.accept = false;
                ObjectOutputStream dout;
            try {
                dout = new ObjectOutputStream(Chat_client.socket.getOutputStream());
                dout.writeObject(dtsk);
                System.out.println("đã gửi phản hồi: từ chối");
            } catch (IOException ex) {
                Logger.getLogger(fr_chat.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    public void initcall(String mode){//request_call
        System.out.println("call in initcall fr_chat");
        Chat_client.calling = true;
                call = new fr_call();
                call.setTitle(fr_name);
                call.lb_avartar.setIcon(icon_fr);
                call.fr_ID = fr_ID;
                call.fr_chat = this;
                call.init_audio();
                call.init_player();
                int x,y;
                x = this.getLocation().x+this.getWidth();
                y = this.getLocation().y;
                if(x+call.getWidth()>dim.width)
                    x = this.getLocation().x-call.getWidth();
                call.setLocation(x, y);
                call.setVisible(true);
                
                data_socket dtsk = new data_socket();
                dtsk.action = mode;
                dtsk.accept = true;
                String data[] = new String[4];
                data[0] = String.valueOf(Chat_client.my_ID);
                data[1] = String.valueOf(fr_ID);
                data[2] = call.my_ip;
                data[3] = String.valueOf(call.my_port);
                dtsk.data = data;
                ObjectOutputStream dout;
            try {
                dout = new ObjectOutputStream(Chat_client.socket.getOutputStream());
                dout.writeObject(dtsk);
                System.out.println("cuộc gọi được thiết lập: đồng ý");
            } catch (IOException ex) {
                Logger.getLogger(fr_chat.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(mode.equalsIgnoreCase("respon_call")){
                try {
                // nếu chấp chận thì khởi tạo phần thu âm
                call.init_recorder(InetAddress.getByName(this.data_from_server[2]), Integer.valueOf(this.data_from_server[3]));
                call.lb_status.setText("Đã kết nối");
                } catch (UnknownHostException ex) {
                    Logger.getLogger(fr_chat.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
    }
    public void load_history(){
        data_socket dtsk = new data_socket();
        dtsk.action = "load_history";
        String[] data = new String[2];
        data[0] = String.valueOf(Chat_client.my_ID);
        data[1] = String.valueOf(this.fr_ID);
        dtsk.data = data;
        try {
            ObjectOutputStream dout = new ObjectOutputStream(Chat_client.socket.getOutputStream());
            dout.writeObject(dtsk);
        } catch (IOException ex) {
            Logger.getLogger(fr_chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void send(String msg){
        try {
            ObjectOutputStream dout = new ObjectOutputStream(Chat_client.socket.getOutputStream());
            data_socket dtsk = new data_socket();
            dtsk.action = "chat";
            String[] data = new String[4];
            data[0] = String.valueOf(Chat_client.my_ID);
            data[1] = String.valueOf(this.fr_ID);
            data[2] = Chat_client.full_name;
            data[3] = msg;
            dtsk.data = data;
            dout.writeObject(dtsk);
            this.cus_append2(msg,1);
            this.txt_input_msg.requestFocus();
        } catch (IOException ex) {
            System.out.println("send error");
            Logger.getLogger(fr_chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void cus_append2(String data,int person){
        String body,html_st,html_end;
        html_st = "<html>";
        html_end = "<div style='height:10px;'></div></html>";
        if(person == 1){
            body = "<div style='"
                    + "text-align: right; "
                    + "width: 330px; "
                    + "height:auto;"
                    + "margin: 10px 0px 5px 10px;'>"
                    + "Tôi"
                    + "</div>"
                    +"<div style='"
                    + "text-align: right; "
                    + "width: 330px;"
                    + "height:auto;"
                    + "background-color:#ffffff; "
                    + "border: 2px solid #000000; "
                    + "margin:0px 0px 0px 10px;"
                    + "padding:5px;'>"
                    + data
                    + "</div>";
        }
        else{
            body = "<div style='"
                    + "text-align: left; "
                    + "width: 330px; "
                    + "height:auto;"
                    + "margin: 10px 0px 5px 10px;'>"
                    + fr_name
                    + "</div>"
                    + "<div style='"
                    + "text-align: left; "
                    + "width: 330px; "
                    + "height:auto; "
                    + "background-color:#E0EDFF; "
                    + "border: 2px solid #48649F; "
                    + "margin:0px 0px 0px 10px;"
                    + "padding: 5px;'>"
                    + data
                    + "</div>";
        }
        //JScrollBar vertical = scrollpane_html.getVerticalScrollBar();

        //vertical.setValue(html.getDocument().getLength());
        
        this.messenge += body;
        html.setText(html_st+this.messenge+html_end);
        html.setCaretPosition(html.getDocument().getLength());
        
    }
    
    public void vibrate() {
        this.setState(Frame.NORMAL);
        if(!vibrate)
            return;
        int VIBRATION_LENGTH = 4;
        int VIBRATION_VELOCITY = 10;
        try {
          int originalX = this.getLocationOnScreen().x;
          int originalY = this.getLocationOnScreen().y;
          for(int i = 0; i < VIBRATION_LENGTH; i++) {
            Thread.sleep(10);
            this.setLocation(originalX, originalY + VIBRATION_VELOCITY);
            Thread.sleep(10);
            this.setLocation(originalX, originalY - VIBRATION_VELOCITY);
            Thread.sleep(10);
            this.setLocation(originalX + VIBRATION_VELOCITY, originalY);
            Thread.sleep(10);
            this.setLocation(originalX, originalY);
          }
          vibrate = true;
        }
        catch (Exception ex) {
            Logger.getLogger(fr_chat.class.getName()).log(Level.SEVERE, null, ex);
        }
  }
    public Clip playsound(String path){
        String file_path = "sound/"+path;
        try {
            URL yourFile = getClass().getClassLoader().getResource(file_path);
            AudioInputStream stream;
            AudioFormat format;
            DataLine.Info info;
            
            stream = AudioSystem.getAudioInputStream(yourFile);
            format = stream.getFormat();
            info = new DataLine.Info(Clip.class, format);
            clip = (Clip) AudioSystem.getLine(info);
            clip.open(stream);
            return clip;
        }
        catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
            Logger.getLogger(fr_chat.class.getName()).log(Level.SEVERE, null, e);
        }
        return null;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(fr_chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new fr_chat().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_buzz;
    public javax.swing.JButton btn_call;
    private javax.swing.JTextPane html;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JLabel lb_avaratar_fr;
    public javax.swing.JLabel lb_avartar_me;
    private javax.swing.JScrollPane scrollpane_html;
    public javax.swing.JTextArea txt_input_msg;
    // End of variables declaration//GEN-END:variables
}
